{"version":3,"sources":["AcronymCard.js","App.js","serviceWorker.js","index.js"],"names":["AcronymCard","props","Card","bg","style","width","Header","acronym","Body","Title","spelledOut","Text","tags","map","tag","Badge","pill","variant","App","axiosGetAcronyms","text","axios","get","params","then","response","setState","acronyms","data","getDataFromDb","fetch","json","res","putDataToDB","message","console","log","currentIds","state","id","idToBeAdded","includes","post","deleteFromDB","idToDelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","update","intervalIsSet","objectToUpdate","pageContent","addAcronym","reportBug","handleMessage","bind","chrome","runtime","onMessage","addListener","this","tabs","executeScript","file","lastError","msg","action","source","removeListener","clearInterval","padding","length","Alert","ButtonToolbar","Button","onClick","Form","Group","controlId","Label","Control","placeholder","as","rows","type","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a533df1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst AcronymCard = (props) => (\r\n  <Card bg=\"light\" style={{ width: '18rem' }}>\r\n    <Card.Header>{props.acronym}</Card.Header>\r\n    <Card.Body>\r\n      <Card.Title>{props.spelledOut}</Card.Title>\r\n      <Card.Text>\r\n        Tags: {props.tags.map((tag) => {\r\n          return <Badge pill variant=\"info\">{tag}</Badge>\r\n        })}\r\n      </Card.Text>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nexport default AcronymCard;","// /client/App.js\n/*global chrome*/\nimport React, { Component } from 'react';\nimport AcronymCard from './AcronymCard';\nimport Alert from 'react-bootstrap/Alert';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      pageContent: \"\",\n      acronyms: [],\n      addAcronym: false,\n      reportBug: false,\n    };\n    this.handleMessage = this.handleMessage.bind(this);\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    chrome.runtime.onMessage.addListener(this.handleMessage);\n  \n    chrome.tabs.executeScript(null, {\n      file: \"getPagesSource.js\"\n    }, function() {\n      // If you try and inject into an extensions page or the webstore/NTP you'll get an error\n      if (chrome.runtime.lastError) {\n        console.log('There was an error injecting script : \\n' + chrome.runtime.lastError.message);\n      }\n    });\n\n    // this.getDataFromDb();\n    // if (!this.state.intervalIsSet) {\n    //   let interval = setInterval(this.getDataFromDb, 1000);\n    //   this.setState({ intervalIsSet: interval });\n    // }\n  }\n\n  handleMessage(msg) {\n    // Handle received messages\n    if (msg.action === 'getSource') {\n      console.log(\"msg.source =\" + msg.source);\n      this.axiosGetAcronyms(msg.source);\n      this.setState({pageContent: msg.source});\n    }\n   }\n\n  axiosGetAcronyms = (text) => {\n    return axios.get('http://localhost:3001/api/getAcronyms', {\n      params: {\n        text: text\n      }\n    })\n    .then(response => {\n      this.setState({acronyms: response.data});\n      // returning the data here allows the caller to get it through another .then(...)\n      return response.data;\n    })\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    chrome.runtime.onMessage.removeListener(this.handleMessage);\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (message) => {\n    console.log(\"adding data...\");\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idToDelete) => {\n    console.log(\"delting: \" + idToDelete)\n    parseInt(idToDelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      console.log(\"dat = \" + dat.id + \"idToDelete =\" + idToDelete );\n      if (dat.id == idToDelete) {\n        console.log(\"found it\")\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data:{\n        id: objIdToDelete,\n      }\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    const tags = [\"Tag1\", \"Tag2\", \"Tag3\"];\n    return (\n      <div style={{padding: \"20px\"}}>\n        {/* <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button> */}\n          {this.state.acronyms.length > 0\n          ? <Alert variant={'success'}>\n              We found <b>{this.state.acronyms.length}</b> acronyms on this page!\n            </Alert>\n          : <Alert variant={'danger'}>\n              Sorry, we didn't find any acronyms. You can manually add one below to help others.\n            </Alert>\n          }\n          {this.state.acronyms.map((acronym) => \n            <AcronymCard acronym={acronym} spelledOut={\"American Standard Code for Information Interchange\"} tags={tags} />\n          )}\n          <ButtonToolbar>\n            <Button\n              variant=\"primary\"\n              onClick={() => {this.setState({addAcronym: true, reportBug: false})}}\n            >\n              Add New Acronym\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => {this.setState({reportBug: true, addAcronym: false})}}\n            >\n              Report Bug\n            </Button>\n          </ButtonToolbar>\n          {this.state.addAcronym\n          ? <Form>\n              <Form.Group controlId=\"addAcronymForm.acronym\">\n                <Form.Label>Acronym</Form.Label>\n                <Form.Control placeholder=\"TYSM\" />\n              </Form.Group>\n              <Form.Group controlId=\"addAcronymForm.phrase\">\n                <Form.Label>Phrase</Form.Label>\n                <Form.Control placeholder=\"Thank You So Much\" />\n              </Form.Group>\n              <Form.Group controlId=\"addAcronymForm.tags\">\n                <Form.Label>Tags</Form.Label>\n                <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"Tags help us categorize acronyms. Please comma seperate (e.g. automotive, cars, trucks, etc.)\"/>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                onClick={() => {this.setState({addAcronym: false})}}\n              >\n                Submit\n              </Button>\n            </Form>\n        : null}\n        {this.state.reportBug\n          ? <Form>\n              <Form.Group controlId=\"reportBugForm.name\">\n              <Form.Label>Name</Form.Label>\n                <Form.Control\n                  required\n                  type=\"text\"\n                  placeholder=\"Mike Rotch\"\n                />\n              </Form.Group>\n              <Form.Group controlId=\"reportBugForm.email\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n              </Form.Group>\n              <Form.Group controlId=\"reportBugForm.message\">\n                <Form.Label>Message</Form.Label>\n                <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"My app has crashed! Chrome version: ...\"/>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                onClick={() => {this.setState({reportBug: false})}}\n              >\n                Submit\n              </Button>\n            </Form>\n        : null}\n        {/* </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}