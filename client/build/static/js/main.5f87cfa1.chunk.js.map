{"version":3,"sources":["AcronymCard.js","App.js","serviceWorker.js","index.js"],"names":["AcronymCard","props","Card","bg","style","width","Header","acronym","Body","Title","phrase","Text","tags","map","tag","Badge","pill","variant","App","axiosGetAcronyms","text","axios","get","params","then","response","setState","acronyms","data","putDataToDB","message","console","log","currentIds","state","id","idToBeAdded","includes","post","deleteFromDB","idToDelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","update","intervalIsSet","objectToUpdate","pageContent","addAcronym","reportBug","handleMessage","bind","chrome","runtime","onMessage","addListener","this","tabs","insertCSS","file","executeScript","lastError","msg","action","source","res","removeListener","clearInterval","padding","length","Alert","spelledOut","ButtonToolbar","Button","onClick","Form","Group","controlId","Label","Control","placeholder","as","rows","type","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAoBeA,G,YAdK,SAACC,GAAD,OAClB,kBAACC,EAAA,EAAD,CAAMC,GAAG,QAAQC,MAAO,CAAEC,MAAO,UAC/B,kBAACH,EAAA,EAAKI,OAAN,KAAcL,EAAMM,SACpB,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAaR,EAAMS,QACnB,kBAACR,EAAA,EAAKS,KAAN,cACSV,EAAMW,KAAKC,KAAI,SAACC,GACrB,OAAO,kBAACC,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,QAAQH,W,gDCgR9BI,E,YA/Qb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAmDRkB,iBAAmB,SAACC,GAClB,OAAOC,IAAMC,IAAI,wCAAyC,CACxDC,OAAQ,CACNH,KAAMA,KAGTI,MAAK,SAAAC,GAGJ,OAFA,EAAKC,SAAS,CAACC,SAAUF,EAASG,OAE3BH,EAASG,SA7DD,EA0FnBC,YAAc,SAACC,GACbC,QAAQC,IAAI,kBAGZ,IAFA,IAAIC,EAAa,EAAKC,MAAMN,KAAKf,KAAI,SAACe,GAAD,OAAUA,EAAKO,MAChDC,EAAc,EACXH,EAAWI,SAASD,MACvBA,EAGJf,IAAMiB,KAAK,oCAAqC,CAC9CH,GAAIC,EACJN,QAASA,KApGM,EA0GnBS,aAAe,SAACC,GACdT,QAAQC,IAAI,YAAcQ,GAC1BC,SAASD,GACT,IAAIE,EAAgB,KACpB,EAAKR,MAAMN,KAAKe,SAAQ,SAACC,GACvBb,QAAQC,IAAI,SAAWY,EAAIT,GAAK,eAAiBK,GAC7CI,EAAIT,IAAMK,IACZT,QAAQC,IAAI,YACZU,EAAgBE,EAAIC,QAIxBxB,IAAMyB,OAAO,uCAAwC,CACnDlB,KAAK,CACHO,GAAIO,MAxHS,EA+HnBK,SAAW,SAACC,EAAYC,GACtB,IAAIC,EAAgB,KACpBT,SAASO,GACT,EAAKd,MAAMN,KAAKe,SAAQ,SAACC,GACnBA,EAAIT,IAAMa,IACZE,EAAgBN,EAAIC,QAIxBxB,IAAMiB,KAAK,uCAAwC,CACjDH,GAAIe,EACJC,OAAQ,CAAErB,QAASmB,MAxIrB,EAAKf,MAAQ,CACXC,GAAI,EACJL,QAAS,KACTsB,eAAe,EACfZ,WAAY,KACZQ,WAAY,KACZK,eAAgB,KAChBC,YAAa,GACb3B,SAAU,GACV4B,YAAY,EACZC,WAAW,GAEb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAdJ,E,iFAqBjBC,OAAOC,QAAQC,UAAUC,YAAYC,KAAKN,eAC1CE,OAAOK,KAAKC,UAAU,CAACC,KAAK,gBAC5BnC,QAAQC,IAAI,cACZ2B,OAAOK,KAAKG,cAAc,KAAM,CAC9BD,KAAM,sBACL,WAEGP,OAAOC,QAAQQ,WACjBrC,QAAQC,IAAI,2CAA6C2B,OAAOC,QAAQQ,UAAUtC,c,oCAW1EuC,GAEO,cAAfA,EAAIC,SACNvC,QAAQC,IAAI,eAAiBqC,EAAIE,QACjCR,KAAK5C,iBAAiBkD,EAAIE,QACvB/C,MAAK,SAACgD,GACLzC,QAAQC,IAAIwC,MAEhBT,KAAKrC,SAAS,CAAC4B,YAAae,EAAIE,Y,6CAoBlCZ,OAAOC,QAAQC,UAAUY,eAAeV,KAAKN,eACzCM,KAAK7B,MAAMkB,gBACbsB,cAAcX,KAAK7B,MAAMkB,eACzBW,KAAKrC,SAAS,CAAE0B,cAAe,U,+BA0EzB,IAAD,OACDxC,EAAO,CAAC,OAAQ,OAAQ,QAC9B,OACE,yBAAKR,MAAO,CAACuE,QAAS,SA4CjBZ,KAAK7B,MAAMP,SAASiD,OAAS,EAC5B,kBAACC,EAAA,EAAD,CAAO5D,QAAS,WAAhB,YACW,2BAAI8C,KAAK7B,MAAMP,SAASiD,QADnC,2BAGA,kBAACC,EAAA,EAAD,CAAO5D,QAAS,UAAhB,sFAID8C,KAAK7B,MAAMP,SAASd,KAAI,SAACN,GAAD,OACvB,kBAAC,EAAD,CAAaA,QAASA,EAASuE,WAAY,qDAAsDlE,KAAMA,OAEzG,kBAACmE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE/D,QAAQ,UACRgE,QAAS,WAAO,EAAKvD,SAAS,CAAC6B,YAAY,EAAMC,WAAW,MAF9D,mBAMA,kBAACwB,EAAA,EAAD,CACE/D,QAAQ,eACRgE,QAAS,WAAO,EAAKvD,SAAS,CAAC8B,WAAW,EAAMD,YAAY,MAF9D,eAODQ,KAAK7B,MAAMqB,WACV,kBAAC2B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,YAAY,UAE5B,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,yBACpB,kBAACF,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,YAAY,uBAE5B,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBACpB,kBAACF,EAAA,EAAKG,MAAN,aACA,kBAACH,EAAA,EAAKI,QAAN,CAAcE,GAAG,WAAWC,KAAK,IAAIF,YAAY,mGAEnD,kBAACP,EAAA,EAAD,CACEU,KAAK,SACLT,QAAS,WAAO,EAAKvD,SAAS,CAAC6B,YAAY,MAF7C,WAOJ,KACDQ,KAAK7B,MAAMsB,UACR,kBAAC0B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACtB,kBAACF,EAAA,EAAKG,MAAN,aACE,kBAACH,EAAA,EAAKI,QAAN,CACEK,UAAQ,EACRD,KAAK,OACLH,YAAY,gBAGhB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBACpB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcI,KAAK,QAAQH,YAAY,sBAEzC,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,yBACpB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcE,GAAG,WAAWC,KAAK,IAAIF,YAAY,6CAEnD,kBAACP,EAAA,EAAD,CACEU,KAAK,SACLT,QAAS,WAAO,EAAKvD,SAAS,CAAC8B,WAAW,MAF5C,WAOJ,U,GA1QQoC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhF,MAAK,SAAAiF,GACjCA,EAAaC,kB","file":"static/js/main.5f87cfa1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst AcronymCard = (props) => (\r\n  <Card bg=\"light\" style={{ width: '18rem' }}>\r\n    <Card.Header>{props.acronym}</Card.Header>\r\n    <Card.Body>\r\n      <Card.Title>{props.phrase}</Card.Title>\r\n      <Card.Text>\r\n        Tags: {props.tags.map((tag) => {\r\n          return <Badge pill variant=\"info\">{tag}</Badge>\r\n        })}\r\n      </Card.Text>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nexport default AcronymCard;","// /client/App.js\r\n/*global chrome*/\r\nimport React, { Component } from 'react';\r\nimport AcronymCard from './AcronymCard';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n  // initialize our state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: 0,\r\n      message: null,\r\n      intervalIsSet: false,\r\n      idToDelete: null,\r\n      idToUpdate: null,\r\n      objectToUpdate: null,\r\n      pageContent: \"\",\r\n      acronyms: [],\r\n      addAcronym: false,\r\n      reportBug: false,\r\n    };\r\n    this.handleMessage = this.handleMessage.bind(this);\r\n  }\r\n\r\n  // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has\r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    chrome.runtime.onMessage.addListener(this.handleMessage);\r\n    chrome.tabs.insertCSS({file:\"Tooltip.css\"});\r\n    console.log(\"Loaded CSS\");\r\n    chrome.tabs.executeScript(null, {\r\n      file: \"getPagesSource.js\"\r\n    }, function() {\r\n      // If you try and inject into an extensions page or the webstore/NTP you'll get an error\r\n      if (chrome.runtime.lastError) {\r\n        console.log('There was an error injecting script : \\n' + chrome.runtime.lastError.message);\r\n      }\r\n    });\r\n\r\n    // this.getDataFromDb();\r\n    // if (!this.state.intervalIsSet) {\r\n    //   let interval = setInterval(this.getDataFromDb, 1000);\r\n    //   this.setState({ intervalIsSet: interval });\r\n    // }\r\n  }\r\n\r\n  handleMessage(msg) {\r\n    // Handle received messages\r\n    if (msg.action === 'getSource') {\r\n      console.log(\"msg.source =\" + msg.source);\r\n      this.axiosGetAcronyms(msg.source)\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n      this.setState({pageContent: msg.source});\r\n    }\r\n   }\r\n\r\n  axiosGetAcronyms = (text) => {\r\n    return axios.get('http://localhost:3001/api/getAcronyms', {\r\n      params: {\r\n        text: text\r\n      }\r\n    })\r\n    .then(response => {\r\n      this.setState({acronyms: response.data});\r\n      // returning the data here allows the caller to get it through another .then(...)\r\n      return response.data;\r\n    })\r\n  }\r\n\r\n  // never let a process live forever\r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {\r\n    chrome.runtime.onMessage.removeListener(this.handleMessage);\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n\r\n  // just a note, here, in the front end, we use the id key of our data object\r\n  // in order to identify which we want to Update or delete.\r\n  // for our back end, we use the object id assigned by MongoDB to modify\r\n  // data base entries\r\n\r\n  // our first get method that uses our backend api to\r\n  // fetch data from our data base\r\n  // getDataFromDb = () => {\r\n  //   fetch('http://localhost:3001/api/getData')\r\n  //     .then((data) => data.json())\r\n  //     .then((res) => this.setState({ data: res.data }));\r\n  // };\r\n\r\n  // our put method that uses our backend api\r\n  // to create new query into our data base\r\n  putDataToDB = (message) => {\r\n    console.log(\"adding data...\");\r\n    let currentIds = this.state.data.map((data) => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n\r\n    axios.post('http://localhost:3001/api/putData', {\r\n      id: idToBeAdded,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  // our delete method that uses our backend api\r\n  // to remove existing database information\r\n  deleteFromDB = (idToDelete) => {\r\n    console.log(\"delting: \" + idToDelete)\r\n    parseInt(idToDelete);\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach((dat) => {\r\n      console.log(\"dat = \" + dat.id + \"idToDelete =\" + idToDelete );\r\n      if (dat.id == idToDelete) {\r\n        console.log(\"found it\")\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete('http://localhost:3001/api/deleteData', {\r\n      data:{\r\n        id: objIdToDelete,\r\n      }\r\n    });\r\n  };\r\n\r\n  // our update method that uses our backend api\r\n  // to overwrite existing data base information\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    parseInt(idToUpdate);\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id == idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post('http://localhost:3001/api/updateData', {\r\n      id: objIdToUpdate,\r\n      update: { message: updateToApply },\r\n    });\r\n  };\r\n\r\n  // here is our UI\r\n  // it is easy to understand their functions when you\r\n  // see them render into our screen\r\n  render() {\r\n    const tags = [\"Tag1\", \"Tag2\", \"Tag3\"];\r\n    return (\r\n      <div style={{padding: \"20px\"}}>\r\n        {/* \r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => this.setState({ message: e.target.value })}\r\n            placeholder=\"add something in the database\"\r\n            style={{ width: '200px' }}\r\n          />\r\n          <button onClick={() => this.putDataToDB(this.state.message)}>\r\n            ADD\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\r\n            placeholder=\"put id of item to delete here\"\r\n          />\r\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n            DELETE\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\r\n            placeholder=\"id of item to update here\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\r\n            placeholder=\"put new value of the item here\"\r\n          />\r\n          <button\r\n            onClick={() =>\r\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n            }\r\n          >\r\n            UPDATE\r\n          </button> */}\r\n          {this.state.acronyms.length > 0\r\n          ? <Alert variant={'success'}>\r\n              We found <b>{this.state.acronyms.length}</b> acronyms on this page!\r\n            </Alert>\r\n          : <Alert variant={'danger'}>\r\n              Sorry, we didn't find any acronyms. You can manually add one below to help others.\r\n            </Alert>\r\n          }\r\n          {this.state.acronyms.map((acronym) => \r\n            <AcronymCard acronym={acronym} spelledOut={\"American Standard Code for Information Interchange\"} tags={tags} />\r\n          )}\r\n          <ButtonToolbar>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => {this.setState({addAcronym: true, reportBug: false})}}\r\n            >\r\n              Add New Acronym\r\n            </Button>\r\n            <Button\r\n              variant=\"outline-dark\"\r\n              onClick={() => {this.setState({reportBug: true, addAcronym: false})}}\r\n            >\r\n              Report Bug\r\n            </Button>\r\n          </ButtonToolbar>\r\n          {this.state.addAcronym\r\n          ? <Form>\r\n              <Form.Group controlId=\"addAcronymForm.acronym\">\r\n                <Form.Label>Acronym</Form.Label>\r\n                <Form.Control placeholder=\"TYSM\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"addAcronymForm.phrase\">\r\n                <Form.Label>Phrase</Form.Label>\r\n                <Form.Control placeholder=\"Thank You So Much\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"addAcronymForm.tags\">\r\n                <Form.Label>Tags</Form.Label>\r\n                <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"Tags help us categorize acronyms. Please comma seperate (e.g. automotive, cars, trucks, etc.)\"/>\r\n              </Form.Group>\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={() => {this.setState({addAcronym: false})}}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n        : null}\r\n        {this.state.reportBug\r\n          ? <Form>\r\n              <Form.Group controlId=\"reportBugForm.name\">\r\n              <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                  required\r\n                  type=\"text\"\r\n                  placeholder=\"Mike Rotch\"\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"reportBugForm.email\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"name@example.com\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"reportBugForm.message\">\r\n                <Form.Label>Message</Form.Label>\r\n                <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"My app has crashed! Chrome version: ...\"/>\r\n              </Form.Group>\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={() => {this.setState({reportBug: false})}}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n        : null}\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}